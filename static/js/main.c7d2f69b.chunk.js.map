{"version":3,"sources":["Components/taskRow.js","Services/lsTaskService.js","Components/TableNav.js","Components/AddTaskForm.js","Components/TaskTableHead.js","Services/sorting.js","Components/taskTable.js","views/home.js","App.js","serviceWorker.js","index.js"],"names":["TaskRow","props","posts","length","map","post","index","key","className","id","indexMain","Task_Name","Priority","type","checked","Status","onClick","onChangeCheckBox","for","src","alt","deleteTask","getLocalData","jsonList","localStorage","getItem","JSON","parse","saveLocalData","list","jsList","stringify","setItem","TableNav","pageNumbers","i","Math","ceil","totalPosts","postsPerPage","push","name","onChange","hangePostPerPage","value","firstTask","lastTask","totalTasks","changePagePrevious","icon","faAngleLeft","size","faAngleRight","changePageNext","AddTaskForm","faPlus","onSubmit","handleSubmit","editTask","clearInput","title","placeholder","priority","editStatus","status","clearInputs","event","preventDefault","Thead","sortedTitleID","sortTitleUp","faChevronDown","sortTitleDown","faChevronUp","sortedPriorityID","sortPriorityUp","sortPriorityDown","sortedStatusID","sortStatusUp","sortStatusDown","compareUpName","a","b","dataA","toUpperCase","dataB","comparison","compareDownName","compareUpPriority","compareDownPriority","compareUpStatus","compareDownStatus","TaskTable","hadleChange","target","val","setState","hadleChangeCheckBox","taskPriority","taskStatus","taskTitle","AddTaskToList","tempArray","numberOfSpaces","state","taskArray","elem","alert","newTask","addTask","changePageNumber","objName","currentPage","tempCurrentPage","parseInt","object","parentNode","tempArr","splice","handleEditCheckBox","tempObj","sortTaskArrayTitleAsc","sort","sortTaskArrayTitleDesc","sortTaskArrayPriorityAsc","sortTaskArrayPriorityDesc","sortTaskArrayStatusAsc","sortTaskArrayStatusDec","setPosts","setCurrentPage","setPostsPerPage","this","currentPosts","indexOfLastPost","indexOfFirstPost","slice","paginate","Component","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c7d2f69b.chunk.js","sourcesContent":["import React from \"react\";\r\nconst TaskRow = (props) => {\r\n  if (props.posts.length === 0) {\r\n    return (\r\n      <tbody>\r\n        <tr>\r\n          <td>Loading....</td>\r\n        </tr>\r\n      </tbody>\r\n    );\r\n  }\r\n  return (\r\n    <tbody>\r\n      {props.posts.map((post, index) => (\r\n        <tr\r\n          key={index}\r\n          className=\"list-group-item\"\r\n          id={index + props.indexMain}\r\n        >\r\n          <td>{post.Task_Name} </td>\r\n          <td>{post.Priority} </td>\r\n          <td id={index + props.indexMain}>\r\n            <input\r\n              className=\"edit-checkbox\"\r\n              type=\"checkbox\"\r\n              id={index + props.indexMain+\"_DoneCheckBox\"}\r\n              checked={post.Status}\r\n              onClick={props.onChangeCheckBox}\r\n            />\r\n            <label for={index + props.indexMain+\"_DoneCheckBox\"}></label>\r\n          </td>\r\n          <td>\r\n            <img\r\n              className=\"delete-icon\"\r\n              src=\"https://st2.depositphotos.com/5266903/8456/v/450/depositphotos_84569362-stock-illustration-trash-can-flat-yellow-color.jpg\"\r\n              alt=\"trash-icon\"\r\n              onClick={props.deleteTask}\r\n            />\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </tbody>\r\n  );\r\n};\r\nexport default TaskRow;\r\n","const LocalStorageName = \"__taskApplication__List\";\r\n\r\nexport function getLocalData()\r\n{\r\n    var jsonList= localStorage.getItem(LocalStorageName);\r\n    return JSON.parse(jsonList);\r\n}\r\n\r\nexport function saveLocalData(list)\r\n{\r\n    let jsList = JSON.stringify(list);\r\n    localStorage.setItem(LocalStorageName, jsList);\r\n}","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleLeft, faAngleRight } from \"@fortawesome/free-solid-svg-icons\";\r\nconst TableNav = (props) => {\r\n  const pageNumbers = [];\r\n  for (let i = 1; i <= Math.ceil(props.totalPosts / props.postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n\r\n  return (\r\n    <nav className=\"table-navigation\">\r\n      <div>\r\n        <span>Rows per page: </span>\r\n        <select name=\"postsPerPage\" onChange={props.hangePostPerPage}>\r\n          <option value={5}>5</option>\r\n          <option value={10}>10</option>\r\n          <option value={15}>15</option>\r\n        </select>\r\n      </div>\r\n      <div>\r\n        {props.firstTask}-\r\n        {props.lastTask > props.totalTasks ? props.totalTasks : props.lastTask}{\" \"}\r\n        of {props.totalTasks}\r\n      </div>\r\n      <button onClick={props.changePagePrevious}>\r\n        <FontAwesomeIcon icon={faAngleLeft} size=\"2x\" />\r\n      </button>\r\n      {props.lastTask >= props.totalTasks ? (\r\n        <button>\r\n          <FontAwesomeIcon icon={faAngleRight} size=\"2x\" />\r\n        </button>\r\n      ) : (\r\n        <button onClick={props.changePageNext}>\r\n          <FontAwesomeIcon icon={faAngleRight} size=\"2x\" />\r\n        </button>\r\n      )}\r\n    </nav>\r\n  );\r\n};\r\nexport default TableNav;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst AddTaskForm = (props) => {\r\n  return (\r\n    <div className=\"add-form-container\">\r\n      <div className=\"add-Task-icon\">\r\n        <FontAwesomeIcon icon={faPlus} size=\"2x\" />\r\n      </div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"add-input-title\">\r\n          <label> Task Name</label>{\" \"}\r\n          <input\r\n            type=\"text\"\r\n            name=\"taskTitle\"\r\n            onChange={props.editTask}\r\n            onSubmit={props.clearInput}\r\n            value={props.title}\r\n            placeholder=\"Write task name\"\r\n          />\r\n        </div>\r\n        <div className=\"add-input-priority\">\r\n        <label>Priority: </label>\r\n        <select\r\n          name=\"taskPriority\"\r\n          id=\"taskPriorityID\"\r\n          onChange={props.editTask}\r\n          value={props.priority}\r\n          onSubmit={props.clearInput}\r\n        >\r\n          <option value=\"Low\">Low</option>\r\n          <option value=\"Medium\">Medium</option>\r\n          <option value=\"High\">High</option>\r\n        </select>\r\n        </div>\r\n        <div className=\"add-input-done\">\r\n            <label>If task is done:</label>\r\n        <input\r\n          type=\"checkbox\"\r\n          name=\"taskStatus\"\r\n          onChange={props.editStatus}\r\n          checked={props.status}\r\n          id=\"statusCheckBox\"\r\n        />\r\n          <label for={\"statusCheckBox\"}></label>\r\n        </div>\r\n        <input type=\"submit\" onClick={props.clearInputs} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default AddTaskForm;\r\n\r\nfunction handleSubmit(event) {\r\n  event.preventDefault();\r\n}\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faChevronDown,\r\n  faChevronUp,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nconst Thead = (props) => {\r\n  return (\r\n    <thead>\r\n      <tr>\r\n        <th className=\"task-title\">\r\n          Task Name{\" \"}\r\n          {!props.sortedTitleID ? (\r\n            <button onClick={props.sortTitleDown}>\r\n              <FontAwesomeIcon icon={faChevronUp} size=\"1x\" />\r\n            </button>\r\n          ) : (\r\n            <button onClick={props.sortTitleUp}>\r\n              <FontAwesomeIcon icon={faChevronDown} size=\"1x\" />\r\n            </button>\r\n          )}\r\n        </th>\r\n        <th className=\"task-priority\">\r\n          Priority{\" \"}\r\n          {!props.sortedPriorityID ? (\r\n            <button onClick={props.sortPriorityDown}>\r\n              <FontAwesomeIcon icon={faChevronUp} size=\"1x\" />\r\n            </button>\r\n          ) : (\r\n            <button onClick={props.sortPriorityUp}>\r\n              <FontAwesomeIcon icon={faChevronDown} size=\"1x\" />\r\n            </button>\r\n          )}\r\n        </th>\r\n        <th className=\"task-done\">\r\n          Done{\" \"}\r\n          {!props.sortedStatusID ? (\r\n            <button onClick={props.sortStatusDown}>\r\n              <FontAwesomeIcon icon={faChevronUp} size=\"1x\" />\r\n            </button>\r\n          ) : (\r\n            <button onClick={props.sortStatusUp}>\r\n              <FontAwesomeIcon icon={faChevronDown} size=\"1x\" />\r\n            </button>\r\n          )}\r\n        </th>\r\n        <th className=\"task-delete\"></th>\r\n      </tr>\r\n    </thead>\r\n  );\r\n};\r\nexport default Thead;\r\n","// sorting arrays by task name\r\nexport function compareUpName(a, b) {\r\n  const dataA = a.Task_Name.toUpperCase();\r\n  const dataB = b.Task_Name.toUpperCase();\r\n\r\n  let comparison = 0;\r\n  if (dataA > dataB) {\r\n    comparison = 1;\r\n  } else if (dataA < dataB) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n}\r\nexport function compareDownName(a, b) {\r\n  const dataA = a.Task_Name.toUpperCase();\r\n  const dataB = b.Task_Name.toUpperCase();\r\n\r\n  let comparison = 0;\r\n  if (dataA < dataB) {\r\n    comparison = 1;\r\n  } else if (dataA > dataB) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n}\r\n// sorting arrays by priority\r\nexport function compareUpPriority(a, b) {\r\n    let dataA;\r\n    let dataB;\r\n  switch (a.Priority.toUpperCase()) {\r\n    case \"LOW\":\r\n      dataA = 1;\r\n      break;\r\n    case \"MEDIUM\":\r\n        dataA = 2;\r\n      break;\r\n      case \"HIGH\":\r\n        dataA = 3;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  switch (b.Priority.toUpperCase()) {\r\n    case \"LOW\":\r\n      dataB = 1;\r\n      break;\r\n    case \"MEDIUM\":\r\n        dataB = 2;\r\n      break;\r\n      case \"HIGH\":\r\n        dataB = 3;\r\n      break;\r\n      default:\r\n      break;\r\n  }\r\n\r\n  let comparison = 0;\r\n  if (dataA > dataB) {\r\n    comparison = 1;\r\n  } else if (dataA < dataB) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n}\r\n///// drugie???\r\nexport function compareDownPriority(a, b) {\r\n    let dataA;\r\n    let dataB;\r\n  switch (a.Priority.toUpperCase()) {\r\n    case \"LOW\":\r\n      dataA = 1;\r\n      break;\r\n    case \"MEDIUM\":\r\n        dataA = 2;\r\n      break;\r\n      case \"HIGH\":\r\n        dataA = 3;\r\n      break;\r\n      default:\r\n      break;\r\n  }\r\n  switch (b.Priority.toUpperCase()) {\r\n    case \"LOW\":\r\n      dataB = 1;\r\n      break;\r\n    case \"MEDIUM\":\r\n        dataB = 2;\r\n      break;\r\n      case \"HIGH\":\r\n        dataB = 3;\r\n      break;\r\n      default:\r\n      break;\r\n  }\r\n\r\n  let comparison = 0;\r\n  if (dataA > dataB) {\r\n    comparison = -1;\r\n  } else if (dataA < dataB) {\r\n    comparison = 1;\r\n  }\r\n  return comparison;\r\n}\r\n\r\n\r\n\r\n\r\n// sorting arrays by done status\r\nexport function compareUpStatus(a, b) {\r\n  const dataA = a.Status;\r\n  const dataB = b.Status;\r\n  return (dataA === dataB)? 0 : dataA? 1 : -1;\r\n}\r\nexport function compareDownStatus(a, b) {\r\n  const dataA = a.Status;\r\n  const dataB = b.Status;\r\n  return (dataA === dataB)? 0 : dataA? -1 : 1;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport TaskRow from \"./taskRow\";\r\nimport { getLocalData, saveLocalData } from \"../Services/lsTaskService\";\r\nimport TableNav from \"./TableNav\";\r\nimport AddTaskForm from \"./AddTaskForm\";\r\nimport Thead from \"./TaskTableHead\";\r\nimport {\r\n  compareUpName,\r\n  compareDownName,\r\n  compareUpPriority,\r\n  compareDownPriority,\r\n  compareUpStatus,\r\n  compareDownStatus,\r\n} from \"../Services/sorting\";\r\nexport default class TaskTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      taskArray: [],\r\n      post: false,\r\n      setPosts: false,\r\n      currentPage: 1,\r\n      setCurrentPage: 1,\r\n      postsPerPage: 5,\r\n      setPostsPerPage: 10,\r\n      taskTitle: \"\",\r\n      taskPriority: \"Low\",\r\n      taskStatus: false,\r\n      sortedTitleID: 0,\r\n      sortedPriorityID: 0,\r\n      sortedStatusID: 0,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.setState({ taskArray: getLocalData() });\r\n  }\r\n  hadleChange = (event) => {\r\n    let name = event.target.name;\r\n    let val = event.target.value;\r\n    this.setState({ [name]: val });\r\n  };\r\n  hadleChangeCheckBox = (event) => {\r\n    let name = event.target.name;\r\n    let val = event.target.checked;\r\n    this.setState({ [name]: val });\r\n  };\r\n  clearInput = (event) => {\r\n    this.setState({ taskPriority: \"Low\", taskStatus: false, taskTitle: \"\" });\r\n  };\r\n  AddTaskToList = () => {\r\n    let tempArray = [];\r\n    let numberOfSpaces = 0;\r\n\r\n    for (let i = 0; i < this.state.taskTitle.length; i++) {\r\n      if (this.state.taskTitle[i] === \" \") {\r\n        numberOfSpaces += 1;\r\n      }\r\n    }\r\n    if (this.state.taskArray != null) {\r\n      tempArray = this.state.taskArray.map((elem) => elem);\r\n    }\r\n    if (\r\n      this.state.taskTitle === \"\" ||\r\n      this.state.taskTitle.length === numberOfSpaces\r\n    ) {\r\n      alert(\"You have tried to add empty task. Please write a task name.\");\r\n    } else {\r\n      let newTask = {\r\n        Task_Name: this.state.taskTitle,\r\n        Priority: this.state.taskPriority,\r\n        Status: this.state.taskStatus,\r\n      };\r\n      tempArray.push(newTask);\r\n      this.setState({ taskArray: tempArray });\r\n      saveLocalData(tempArray);\r\n    }\r\n    this.clearInput();\r\n  };\r\n\r\n  addTask = () => {\r\n    saveLocalData(this.state.taskArray);\r\n  };\r\n\r\n  changePageNumber = (event) => {\r\n    let objName = event.target.name;\r\n    this.setState({ currentPage: objName });\r\n  };\r\n\r\n  changePageNext = () => {\r\n    let tempCurrentPage = parseInt(this.state.currentPage) + 1;\r\n    this.setState({ currentPage: tempCurrentPage });\r\n  };\r\n  changePagePrevious = () => {\r\n    if (this.state.currentPage > 1) {\r\n      let tempCurrentPage = parseInt(this.state.currentPage) - 1;\r\n      this.setState({ currentPage: tempCurrentPage });\r\n    }\r\n  };\r\n  deleteTask = (event) => {\r\n    let object = event.target.parentNode.parentNode.id;\r\n    let tempArr = this.state.taskArray.map((elem) => elem);\r\n    tempArr.splice(object, 1);\r\n    this.setState({ taskArray: tempArr });\r\n    saveLocalData(tempArr);\r\n  };\r\n\r\n  handleEditCheckBox = (event) => {\r\n    let object = event.target.parentNode.id;\r\n    let tempArr = this.state.taskArray.map((elem) => elem);\r\n    let tempObj = {\r\n      Task_Name: tempArr[object].Task_Name,\r\n      Priority: tempArr[object].Priority,\r\n      Status: event.target.checked,\r\n    };\r\n    tempArr[object] = tempObj;\r\n    this.setState({ taskArray: tempArr });\r\n    saveLocalData(tempArr);\r\n  };\r\n  sortTaskArrayTitleAsc = () => {\r\n    let tempArray = this.state.taskArray;\r\n    tempArray.sort(compareUpName);\r\n    this.setState({ taskArray: tempArray });\r\n    this.setState({ sortedTitleID: 0 });\r\n  };\r\n  sortTaskArrayTitleDesc = () => {\r\n    let tempArray = this.state.taskArray;\r\n    tempArray.sort(compareDownName);\r\n    this.setState({ taskArray: tempArray });\r\n    this.setState({ sortedTitleID: 1 });\r\n  };\r\n  sortTaskArrayPriorityAsc = () => {\r\n    let tempArray = this.state.taskArray;\r\n    tempArray.sort(compareUpPriority);\r\n    this.setState({ taskArray: tempArray });\r\n    this.setState({ sortedPriorityID: 0 });\r\n  };\r\n  sortTaskArrayPriorityDesc = () => {\r\n    let tempArray = this.state.taskArray;\r\n    tempArray.sort(compareDownPriority);\r\n    this.setState({ taskArray: tempArray });\r\n    this.setState({ sortedPriorityID: 1 });\r\n  };\r\n  sortTaskArrayStatusAsc = () => {\r\n    let tempArray = this.state.taskArray;\r\n    tempArray.sort(compareUpStatus);\r\n    this.setState({ taskArray: tempArray });\r\n    this.setState({ sortedStatusID: 1 });\r\n  };\r\n  sortTaskArrayStatusDec = () => {\r\n    let tempArray = this.state.taskArray;\r\n    tempArray.sort(compareDownStatus);\r\n    this.setState({ taskArray: tempArray });\r\n    this.setState({ sortedStatusID: 0 });\r\n  };\r\n\r\n  render() {\r\n    // Get current posts\r\n    var currentPosts;\r\n    const indexOfLastPost = this.state.currentPage * this.state.postsPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - this.state.postsPerPage;\r\n    if (this.state.taskArray != null) {\r\n      currentPosts = this.state.taskArray.slice(\r\n        indexOfFirstPost,\r\n        indexOfLastPost\r\n      );\r\n    }\r\n\r\n    if (this.state.taskArray == null) {\r\n      return (\r\n        <div>\r\n          No task add yet.\r\n          <br />\r\n          <AddTaskForm\r\n            editTask={this.hadleChange}\r\n            editStatus={this.hadleChangeCheckBox}\r\n            clearInputs={this.AddTaskToList}\r\n            title={this.state.taskTitle}\r\n            priority={this.state.taskPriority}\r\n            status={this.state.taskStatus}\r\n          />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"table-container\">\r\n          <table>\r\n            <Thead\r\n              sortTitleUp={this.sortTaskArrayTitleAsc}\r\n              sortTitleDown={this.sortTaskArrayTitleDesc}\r\n              sortPriorityUp={this.sortTaskArrayPriorityAsc}\r\n              sortPriorityDown={this.sortTaskArrayPriorityDesc}\r\n              sortStatusDown={this.sortTaskArrayStatusAsc}\r\n              sortStatusUp={this.sortTaskArrayStatusDec}\r\n              sortedTitleID={this.state.sortedTitleID}\r\n              sortedPriorityID={this.state.sortedPriorityID}\r\n              sortedStatusID={this.state.sortedStatusID}\r\n            />\r\n            <TaskRow\r\n              posts={currentPosts}\r\n              onChangeCheckBox={this.handleEditCheckBox}\r\n              deleteTask={this.deleteTask}\r\n              indexMain={indexOfFirstPost}\r\n            />\r\n          </table>\r\n          <TableNav\r\n            postsPerPage={this.state.postsPerPage}\r\n            totalPosts={this.state.taskArray.length}\r\n            paginate={this.changePageNumber}\r\n            hangePostPerPage={this.hadleChange}\r\n            changePageNext={this.changePageNext}\r\n            changePagePrevious={this.changePagePrevious}\r\n            firstTask={indexOfFirstPost + 1}\r\n            lastTask={indexOfLastPost}\r\n            totalTasks={this.state.taskArray.length}\r\n          />\r\n          <AddTaskForm\r\n            editTask={this.hadleChange}\r\n            editStatus={this.hadleChangeCheckBox}\r\n            clearInputs={this.AddTaskToList}\r\n            title={this.state.taskTitle}\r\n            priority={this.state.taskPriority}\r\n            status={this.state.taskStatus}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TaskTable from '../Components/taskTable';\r\nexport default class Home extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"main-conatainer\">\r\n                <section className=\"polsource-poster\">\r\n                    <img src=\"https://s3.amazonaws.com/crm.consulting/logos/polsource.png\" alt=\"POLSOURCE Campany\"/>\r\n                </section>\r\n                <TaskTable/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './styles/main.scss'\nimport Home from './views/home'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}